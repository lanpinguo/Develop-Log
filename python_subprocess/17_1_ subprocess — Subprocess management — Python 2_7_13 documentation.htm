<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0049)https://docs.python.org/2/library/subprocess.html -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><HTML 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><META content="IE=11.0000" 
http-equiv="X-UA-Compatible">
     
<META http-equiv="Content-Type" content="text/html; charset=utf-8">         
<TITLE>17.1. subprocess — Subprocess management — Python 2.7.13 
documentation</TITLE>         <LINK href="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/classic.css" 
rel="stylesheet" type="text/css">     <LINK href="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/pygments.css" 
rel="stylesheet" type="text/css">         
<SCRIPT type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '2.7.13',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </SCRIPT>
     
<SCRIPT src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/jquery.js" type="text/javascript"></SCRIPT>
     
<SCRIPT src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/underscore.js" type="text/javascript"></SCRIPT>
     
<SCRIPT src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/doctools.js" type="text/javascript"></SCRIPT>
     
<SCRIPT src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/sidebar.js" type="text/javascript"></SCRIPT>
     <LINK title="Search within Python 2.7.13 documentation" href="../_static/opensearch.xml" 
rel="search" type="application/opensearchdescription+xml">     <LINK title="About these documents" 
href="../about.html" rel="author">     <LINK title="Copyright" href="../copyright.html" 
rel="copyright">     <LINK title="Python 2.7.13 documentation" href="../contents.html" 
rel="top">     <LINK title="17. Interprocess Communication and Networking" href="ipc.html" 
rel="up">     <LINK title="17.2. socket — Low-level networking interface" href="socket.html" 
rel="next">     <LINK title="17. Interprocess Communication and Networking" 
href="ipc.html" rel="prev">     <LINK href="../_static/py.png" rel="shortcut icon" 
type="image/png">     <LINK href="https://docs.python.org/2/library/subprocess.html" 
rel="canonical">     
<SCRIPT src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/copybutton.js" type="text/javascript"></SCRIPT>
     
<SCRIPT src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/version_switch.js" type="text/javascript"></SCRIPT>
        
<META name="GENERATOR" content="MSHTML 11.00.10570.1001"></HEAD>   
<BODY role="document">
<DIV class="related" role="navigation" aria-label="related navigation">
<H3>Navigation</H3>
<UL>
  <LI class="right" style="margin-right: 10px;"><A title="General Index" 
  accesskey="I" href="https://docs.python.org/2/genindex.html">index</A></LI>    
       
  <LI class="right"><A title="Python Module Index" href="https://docs.python.org/2/py-modindex.html">modules</A> 
  |</LI>         
  <LI class="right"><A title="17.2. socket — Low-level networking interface" 
  accesskey="N" href="https://docs.python.org/2/library/socket.html">next</A> 
  |</LI>         
  <LI class="right"><A title="17. Interprocess Communication and Networking" 
  accesskey="P" href="https://docs.python.org/2/library/ipc.html">previous</A> 
  |</LI>         
  <LI><IMG style="margin-top: -1px; vertical-align: middle;" alt="" src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/py.png"></LI> 
          
  <LI><A href="https://www.python.org/">Python</A> »</LI>         
  <LI><SPAN class="version_switcher_placeholder">2.7.13</SPAN>           <A 
  href="https://docs.python.org/2/index.html">Documentation</A> »         </LI>  
           
  <LI class="nav-item nav-item-1"><A href="https://docs.python.org/2/library/index.html">The 
  Python Standard Library</A> »</LI>           
  <LI class="nav-item nav-item-2"><A accesskey="U" href="https://docs.python.org/2/library/ipc.html">17. 
  Interprocess Communication and Networking</A> »</LI>       </UL></DIV>
<DIV class="document">
<DIV class="documentwrapper">
<DIV class="bodywrapper">
<DIV class="body" role="main">
<DIV class="section" id="module-subprocess"><SPAN id="subprocess-subprocess-management"></SPAN>
<H1>17.1. <A title="subprocess: Subprocess management." class="reference internal" 
href="https://docs.python.org/2/library/subprocess.html#module-subprocess"><CODE 
class="xref py py-mod docutils literal"><SPAN 
class="pre">subprocess</SPAN></CODE></A> — Subprocess management<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#module-subprocess">¶</A></H1>
<DIV class="versionadded">
<P><SPAN class="versionmodified">New in version 2.4.</SPAN></P></DIV>
<P>The <A title="subprocess: Subprocess management." class="reference internal" 
href="https://docs.python.org/2/library/subprocess.html#module-subprocess"><CODE 
class="xref py py-mod docutils literal"><SPAN 
class="pre">subprocess</SPAN></CODE></A> module allows you to spawn new 
processes, connect to their input/output/error pipes, and obtain their return 
codes.  This module intends to replace several older modules and functions:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>os.system
os.spawn*
os.popen*
popen2.*
commands.*
</PRE></DIV></DIV>
<P>Information about how this module can be used to replace the older functions 
can be found in the <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess-replacements">subprocess-replacements</A> 
section.</P>
<DIV class="admonition seealso">
<P class="first admonition-title">See also</P> 
<P>POSIX users (Linux, BSD, etc.) are strongly encouraged to install and use the 
much more recent <A class="reference external" href="https://pypi.python.org/pypi/subprocess32/">subprocess32</A> 
module instead of the version included with python 2.7.  It is a drop in 
replacement with better behavior in many situations.</P> 
<P class="last"><SPAN class="target" id="index-0"></SPAN><A class="pep reference external" 
href="https://www.python.org/dev/peps/pep-0324"><STRONG>PEP 324</STRONG></A> – 
PEP proposing the subprocess module</P></DIV>
<DIV class="section" id="using-the-subprocess-module">
<H2>17.1.1. Using the <A title="subprocess: Subprocess management." class="reference internal" 
href="https://docs.python.org/2/library/subprocess.html#module-subprocess"><CODE 
class="xref py py-mod docutils literal"><SPAN 
class="pre">subprocess</SPAN></CODE></A> Module<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#using-the-subprocess-module">¶</A></H2>
<P>The recommended way to launch subprocesses is to use the following
 convenience functions.  For more advanced use cases when these do not meet your 
needs, use the underlying <A title="subprocess.Popen" class="reference internal" 
href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">Popen</SPAN></CODE></A> interface.</P>
<DL class="function">
  <DT id="subprocess.call"><CODE class="descclassname">subprocess.</CODE><CODE 
  class="descname">call</CODE><SPAN class="sig-paren">(</SPAN><EM>args</EM>, 
  <EM>*</EM>, <EM>stdin=None</EM>, <EM>stdout=None</EM>, <EM>stderr=None</EM>, 
  <EM>shell=False</EM><SPAN class="sig-paren">)</SPAN><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.call">¶</A></DT>
  <DD>
  <P>Run the command described by <EM>args</EM>.  Wait for command to complete, 
  then return the <CODE class="xref py py-attr docutils literal"><SPAN class="pre">returncode</SPAN></CODE> 
  attribute.</P>
  <P>The arguments shown above are merely the most common ones, described below
   in <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments"><SPAN>Frequently 
  Used Arguments</SPAN></A> (hence the slightly odd notation in the abbreviated 
  signature). The full function signature is the same as that of the <A title="subprocess.Popen" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> constructor - this functions passes all
   supplied arguments directly through to that interface.</P>
  <P>Examples:</P>
  <DIV class="highlight-python">
  <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">call</SPAN><SPAN class="p">([</SPAN><SPAN class="s2">"ls"</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"-l"</SPAN><SPAN class="p">])</SPAN>
<SPAN class="go">0</SPAN>

<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">call</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"exit 1"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN>
<SPAN class="go">1</SPAN>
</PRE></DIV></DIV>
  <DIV class="admonition warning">
  <P class="first admonition-title">Warning</P> 
  <P class="last">Using <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE> can be a security hazard.  See the 
  warning under <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments"><SPAN>Frequently 
  Used Arguments</SPAN></A> for details.</P> </DIV>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">Do not use <CODE class="docutils literal"><SPAN 
  class="pre">stdout=PIPE</SPAN></CODE> or <CODE class="docutils literal"><SPAN 
  class="pre">stderr=PIPE</SPAN></CODE> with this function as that can deadlock 
  based on the child process output volume. Use <A title="subprocess.Popen" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> with the <CODE class="xref py py-meth docutils literal"><SPAN 
  class="pre">communicate()</SPAN></CODE> method when you need pipes.</P> 
  </DIV></DD></DL>
<DL class="function">
  <DT id="subprocess.check_call"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">check_call</CODE><SPAN 
  class="sig-paren">(</SPAN><EM>args</EM>, <EM>*</EM>, <EM>stdin=None</EM>, 
  <EM>stdout=None</EM>, <EM>stderr=None</EM>, <EM>shell=False</EM><SPAN class="sig-paren">)</SPAN><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_call">¶</A></DT>
  <DD>
  <P>Run command with arguments.  Wait for command to complete. If the return
   code was zero then return, otherwise raise <A title="subprocess.CalledProcessError" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError"><CODE 
  class="xref py py-exc docutils literal"><SPAN 
  class="pre">CalledProcessError</SPAN></CODE></A>. The <A title="subprocess.CalledProcessError" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError"><CODE 
  class="xref py py-exc docutils literal"><SPAN 
  class="pre">CalledProcessError</SPAN></CODE></A> object will have the return 
  code in the <A title="subprocess.CalledProcessError.returncode" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError.returncode"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">returncode</SPAN></CODE></A> attribute.</P>
  <P>The arguments shown above are merely the most common ones, described below
   in <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments"><SPAN>Frequently 
  Used Arguments</SPAN></A> (hence the slightly odd notation in the abbreviated 
  signature). The full function signature is the same as that of the <A title="subprocess.Popen" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> constructor - this functions passes all
   supplied arguments directly through to that interface.</P>
  <P>Examples:</P>
  <DIV class="highlight-python">
  <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">check_call</SPAN><SPAN class="p">([</SPAN><SPAN class="s2">"ls"</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"-l"</SPAN><SPAN class="p">])</SPAN>
<SPAN class="go">0</SPAN>

<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">check_call</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"exit 1"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN>
<SPAN class="gt">Traceback (most recent call last):</SPAN>
   <SPAN class="c">...</SPAN>
<SPAN class="gr">subprocess.CalledProcessError</SPAN>: <SPAN class="n">Command 'exit 1' returned non-zero exit status 1</SPAN>
</PRE></DIV></DIV>
  <DIV class="versionadded">
  <P><SPAN class="versionmodified">New in version 2.5.</SPAN></P></DIV>
  <DIV class="admonition warning">
  <P class="first admonition-title">Warning</P> 
  <P class="last">Using <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE> can be a security hazard.  See the 
  warning under <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments"><SPAN>Frequently 
  Used Arguments</SPAN></A> for details.</P> </DIV>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">Do not use <CODE class="docutils literal"><SPAN 
  class="pre">stdout=PIPE</SPAN></CODE> or <CODE class="docutils literal"><SPAN 
  class="pre">stderr=PIPE</SPAN></CODE> with this function as that can deadlock 
  based on the child process output volume. Use <A title="subprocess.Popen" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> with the <CODE class="xref py py-meth docutils literal"><SPAN 
  class="pre">communicate()</SPAN></CODE> method when you need pipes.</P> 
  </DIV></DD></DL>
<DL class="function">
  <DT id="subprocess.check_output"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">check_output</CODE><SPAN 
  class="sig-paren">(</SPAN><EM>args</EM>, <EM>*</EM>, <EM>stdin=None</EM>, 
  <EM>stderr=None</EM>, <EM>shell=False</EM>, 
  <EM>universal_newlines=False</EM><SPAN class="sig-paren">)</SPAN><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output">¶</A></DT>
  <DD>
  <P>Run command with arguments and return its output as a byte string.</P>
  <P>If the return code was non-zero it raises a <A title="subprocess.CalledProcessError" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError"><CODE 
  class="xref py py-exc docutils literal"><SPAN 
  class="pre">CalledProcessError</SPAN></CODE></A>. The <A title="subprocess.CalledProcessError" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError"><CODE 
  class="xref py py-exc docutils literal"><SPAN 
  class="pre">CalledProcessError</SPAN></CODE></A> object will have the return 
  code in the <A title="subprocess.CalledProcessError.returncode" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError.returncode"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">returncode</SPAN></CODE></A> attribute and any output in the <A 
  title="subprocess.CalledProcessError.output" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError.output"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">output</SPAN></CODE></A> attribute.</P>
  <P>The arguments shown above are merely the most common ones, described below
   in <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments"><SPAN>Frequently 
  Used Arguments</SPAN></A> (hence the slightly odd notation in the abbreviated 
  signature). The full function signature is largely the same as that of the <A 
  title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> constructor, except that <EM>stdout</EM> 
  is not permitted as it is used internally. All other supplied arguments are
   passed directly through to the <A title="subprocess.Popen" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> constructor.</P>
  <P>Examples:</P>
  <DIV class="highlight-python">
  <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">check_output</SPAN><SPAN class="p">([</SPAN><SPAN class="s2">"echo"</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"Hello World!"</SPAN><SPAN class="p">])</SPAN>
<SPAN class="go">'Hello World!\n'</SPAN>

<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">check_output</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"exit 1"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN>
<SPAN class="gt">Traceback (most recent call last):</SPAN>
   <SPAN class="c">...</SPAN>
<SPAN class="gr">subprocess.CalledProcessError</SPAN>: <SPAN class="n">Command 'exit 1' returned non-zero exit status 1</SPAN>
</PRE></DIV></DIV>
  <P>To also capture standard error in the result, use <CODE class="docutils literal"><SPAN 
  class="pre">stderr=subprocess.STDOUT</SPAN></CODE>:</P>
  <DIV class="highlight-python">
  <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">check_output</SPAN><SPAN class="p">(</SPAN>
<SPAN class="gp">... </SPAN>    <SPAN class="s2">"ls non_existent_file; exit 0"</SPAN><SPAN class="p">,</SPAN>
<SPAN class="gp">... </SPAN>    <SPAN class="n">stderr</SPAN><SPAN class="o">=</SPAN><SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">STDOUT</SPAN><SPAN class="p">,</SPAN>
<SPAN class="gp">... </SPAN>    <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN>
<SPAN class="go">'ls: non_existent_file: No such file or directory\n'</SPAN>
</PRE></DIV></DIV>
  <DIV class="versionadded">
  <P><SPAN class="versionmodified">New in version 2.7.</SPAN></P></DIV>
  <DIV class="admonition warning">
  <P class="first admonition-title">Warning</P> 
  <P class="last">Using <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE> can be a security hazard.  See the 
  warning under <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments"><SPAN>Frequently 
  Used Arguments</SPAN></A> for details.</P> </DIV>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">Do not use <CODE class="docutils literal"><SPAN 
  class="pre">stderr=PIPE</SPAN></CODE> with this function as that can deadlock
   based on the child process error volume.  Use <A title="subprocess.Popen" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> with the <CODE class="xref py py-meth docutils literal"><SPAN 
  class="pre">communicate()</SPAN></CODE> method when you need a stderr 
  pipe.</P> </DIV></DD></DL>
<DL class="data">
  <DT id="subprocess.PIPE"><CODE class="descclassname">subprocess.</CODE><CODE 
  class="descname">PIPE</CODE><A title="Permalink to this definition" class="headerlink" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE">¶</A></DT>
  <DD>
  <P>Special value that can be used as the <EM>stdin</EM>, <EM>stdout</EM> or 
  <EM>stderr</EM> argument to <A title="subprocess.Popen" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> and indicates that a pipe to the standard 
  stream should be opened.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.STDOUT"><CODE class="descclassname">subprocess.</CODE><CODE 
  class="descname">STDOUT</CODE><A title="Permalink to this definition" class="headerlink" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.STDOUT">¶</A></DT>
  <DD>
  <P>Special value that can be used as the <EM>stderr</EM> argument to <A title="subprocess.Popen" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> and indicates that standard error should 
  go into the same handle as standard output.</P></DD></DL>
<DL class="exception">
  <DT id="subprocess.CalledProcessError"><EM class="property">exception 
  </EM><CODE class="descclassname">subprocess.</CODE><CODE 
  class="descname">CalledProcessError</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError">¶</A></DT>
  <DD>
  <P>Exception raised when a process run by <A title="subprocess.check_call" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_call"><CODE 
  class="xref py py-func docutils literal"><SPAN 
  class="pre">check_call()</SPAN></CODE></A> or <A title="subprocess.check_output" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output"><CODE 
  class="xref py py-func docutils literal"><SPAN 
  class="pre">check_output()</SPAN></CODE></A> returns a non-zero exit 
  status.</P>
  <DL class="attribute">
    <DT id="subprocess.CalledProcessError.returncode"><CODE 
    class="descname">returncode</CODE><A title="Permalink to this definition" 
    class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError.returncode">¶</A></DT>
    <DD>
    <P>Exit status of the child process.</P></DD></DL>
  <DL class="attribute">
    <DT id="subprocess.CalledProcessError.cmd"><CODE 
    class="descname">cmd</CODE><A title="Permalink to this definition" class="headerlink" 
    href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError.cmd">¶</A></DT>
    <DD>
    <P>Command that was used to spawn the child process.</P></DD></DL>
  <DL class="attribute">
    <DT id="subprocess.CalledProcessError.output"><CODE 
    class="descname">output</CODE><A title="Permalink to this definition" class="headerlink" 
    href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError.output">¶</A></DT>
    <DD>
    <P>Output of the child process if this exception is raised by <A title="subprocess.check_output" 
    class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output"><CODE 
    class="xref py py-func docutils literal"><SPAN 
    class="pre">check_output()</SPAN></CODE></A>.  Otherwise, <CODE class="docutils literal"><SPAN 
    class="pre">None</SPAN></CODE>.</P></DD></DL></DD></DL>
<DIV class="section" id="frequently-used-arguments"><SPAN id="id1"></SPAN>
<H3>17.1.1.1. Frequently Used Arguments<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments">¶</A></H3>
<P>To support a wide variety of use cases, the <A title="subprocess.Popen" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">Popen</SPAN></CODE></A> constructor (and the convenience functions) 
accept a large number of optional arguments. For most typical use cases, many of 
these arguments can be safely left at their default values. The arguments that 
are most commonly needed are:</P>
<BLOCKQUOTE>
  <DIV>
  <P><EM>args</EM> is required for all calls and should be a string, or a 
  sequence of program arguments. Providing a sequence of arguments is generally
   preferred, as it allows the module to take care of any required escaping and 
  quoting of arguments (e.g. to permit spaces in file names). If passing a 
  single string, either <EM>shell</EM> must be <A title="True" class="reference internal" 
  href="https://docs.python.org/2/library/constants.html#True"><CODE class="xref py py-const docutils literal"><SPAN 
  class="pre">True</SPAN></CODE></A> (see below) or else the string must simply 
  name the program to be executed without specifying any arguments.</P>
  <P><EM>stdin</EM>, <EM>stdout</EM> and <EM>stderr</EM> specify the executed 
  program’s standard input, standard output and standard error file handles, 
  respectively.  Valid values are <A title="subprocess.PIPE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">PIPE</SPAN></CODE></A>, an existing file descriptor (a positive 
  integer), an existing file object, and <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>.  <A title="subprocess.PIPE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">PIPE</SPAN></CODE></A> indicates that a new pipe to the child 
  should be created.  With the default settings of <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>, no redirection will occur; the child’s file 
  handles will be inherited from the parent.  Additionally, <EM>stderr</EM> can 
  be <A title="subprocess.STDOUT" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STDOUT"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">STDOUT</SPAN></CODE></A>, which indicates that the stderr data 
  from the child process should be captured into the same file handle as for 
  stdout.</P>
  <P id="index-1">When <EM>stdout</EM> or <EM>stderr</EM> are pipes and 
  <EM>universal_newlines</EM> is <CODE class="docutils literal"><SPAN class="pre">True</SPAN></CODE> 
  then all line endings will be converted to <CODE 
  class="docutils literal"><SPAN class="pre">'\n'</SPAN></CODE> as described for 
  the <A class="reference internal" href="https://docs.python.org/2/glossary.html#term-universal-newlines"><SPAN 
  class="xref std std-term">universal newlines</SPAN></A> <CODE class="docutils literal"><SPAN 
  class="pre">'U'</SPAN></CODE> mode argument to <A title="open" class="reference internal" 
  href="https://docs.python.org/2/library/functions.html#open"><CODE class="xref py py-func docutils literal"><SPAN 
  class="pre">open()</SPAN></CODE></A>.</P>
  <P>If <EM>shell</EM> is <CODE class="docutils literal"><SPAN 
  class="pre">True</SPAN></CODE>, the specified command will be executed through
   the shell.  This can be useful if you are using Python primarily for the
   enhanced control flow it offers over most system shells and still want
   convenient access to other shell features such as shell pipes, filename
   wildcards, environment variable expansion, and expansion of <CODE class="docutils literal"><SPAN 
  class="pre">~</SPAN></CODE> to a user’s home directory.  However, note that 
  Python itself offers implementations of many shell-like features (in 
  particular, <A title="glob: Unix shell style pathname pattern expansion." 
  class="reference internal" href="https://docs.python.org/2/library/glob.html#module-glob"><CODE 
  class="xref py py-mod docutils literal"><SPAN 
  class="pre">glob</SPAN></CODE></A>, <A title="fnmatch: Unix shell style filename pattern matching." 
  class="reference internal" href="https://docs.python.org/2/library/fnmatch.html#module-fnmatch"><CODE 
  class="xref py py-mod docutils literal"><SPAN 
  class="pre">fnmatch</SPAN></CODE></A>, <A title="os.walk" class="reference internal" 
  href="https://docs.python.org/2/library/os.html#os.walk"><CODE class="xref py py-func docutils literal"><SPAN 
  class="pre">os.walk()</SPAN></CODE></A>, <A title="os.path.expandvars" class="reference internal" 
  href="https://docs.python.org/2/library/os.path.html#os.path.expandvars"><CODE 
  class="xref py py-func docutils literal"><SPAN 
  class="pre">os.path.expandvars()</SPAN></CODE></A>, <A title="os.path.expanduser" 
  class="reference internal" href="https://docs.python.org/2/library/os.path.html#os.path.expanduser"><CODE 
  class="xref py py-func docutils literal"><SPAN 
  class="pre">os.path.expanduser()</SPAN></CODE></A>, and <A title="shutil: High-level file operations, including copying." 
  class="reference internal" href="https://docs.python.org/2/library/shutil.html#module-shutil"><CODE 
  class="xref py py-mod docutils literal"><SPAN 
  class="pre">shutil</SPAN></CODE></A>).</P>
  <DIV class="admonition warning">
  <P class="first admonition-title">Warning</P> 
  <P>Executing shell commands that incorporate unsanitized input from an
   untrusted source makes a program vulnerable to <A class="reference external" 
  href="http://en.wikipedia.org/wiki/Shell_injection#Shell_injection">shell 
  injection</A>, a serious security flaw which can result in arbitrary command 
  execution. For this reason, the use of <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE> is <STRONG>strongly discouraged</STRONG>
   in cases where the command string is constructed from external input:</P> 
  <DIV class="highlight-python">
  <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="kn">from</SPAN> <SPAN class="nn">subprocess</SPAN> <SPAN class="kn">import</SPAN> <SPAN class="n">call</SPAN>
<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">filename</SPAN> <SPAN class="o">=</SPAN> <SPAN class="nb">input</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"What file would you like to display?</SPAN><SPAN class="se">\n</SPAN><SPAN class="s2">"</SPAN><SPAN class="p">)</SPAN>
<SPAN class="go">What file would you like to display?</SPAN>
<SPAN class="go">non_existent; rm -rf / #</SPAN>
<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">call</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"cat "</SPAN> <SPAN class="o">+</SPAN> <SPAN class="n">filename</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN> <SPAN class="c1"># Uh-oh. This will end badly...</SPAN>
</PRE></DIV></DIV>
  <P><CODE class="docutils literal"><SPAN class="pre">shell=False</SPAN></CODE> 
  disables all shell based features, but does not suffer from this 
  vulnerability; see the Note in the <A title="subprocess.Popen" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> constructor documentation for helpful 
  hints in getting <CODE class="docutils literal"><SPAN 
  class="pre">shell=False</SPAN></CODE> to work.</P>
  <P class="last">When using <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE>, <A title="pipes.quote" class="reference internal" 
  href="https://docs.python.org/2/library/pipes.html#pipes.quote"><CODE class="xref py py-func docutils literal"><SPAN 
  class="pre">pipes.quote()</SPAN></CODE></A> can be used to properly escape 
  whitespace and shell metacharacters in strings that are going to be used to 
  construct shell commands.</P></DIV></DIV></BLOCKQUOTE>
<P>These options, along with all of the other options, are described in more
 detail in the <A title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">Popen</SPAN></CODE></A> constructor documentation.</P></DIV>
<DIV class="section" id="popen-constructor">
<H3>17.1.1.2. Popen Constructor<A title="Permalink to this headline" class="headerlink" 
href="https://docs.python.org/2/library/subprocess.html#popen-constructor">¶</A></H3>
<P>The underlying process creation and management in this module is handled by
 the <A title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">Popen</SPAN></CODE></A> class. It offers a lot of flexibility so 
that developers are able to handle the less common cases not covered by the 
convenience functions.</P>
<DL class="class">
  <DT id="subprocess.Popen"><EM class="property">class </EM><CODE class="descclassname">subprocess.</CODE><CODE 
  class="descname">Popen</CODE><SPAN class="sig-paren">(</SPAN><EM>args</EM>, 
  <EM>bufsize=0</EM>, <EM>executable=None</EM>, <EM>stdin=None</EM>, 
  <EM>stdout=None</EM>, <EM>stderr=None</EM>, <EM>preexec_fn=None</EM>, 
  <EM>close_fds=False</EM>, <EM>shell=False</EM>, <EM>cwd=None</EM>, 
  <EM>env=None</EM>, <EM>universal_newlines=False</EM>, 
  <EM>startupinfo=None</EM>, <EM>creationflags=0</EM><SPAN 
  class="sig-paren">)</SPAN><A title="Permalink to this definition" class="headerlink" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen">¶</A></DT>
  <DD>
  <P>Execute a child program in a new process.  On Unix, the class uses <A 
  title="os.execvp" class="reference internal" href="https://docs.python.org/2/library/os.html#os.execvp"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">os.execvp()</SPAN></CODE></A>-like behavior to execute the child 
  program.  On Windows, the class uses the Windows <CODE class="docutils literal"><SPAN 
  class="pre">CreateProcess()</SPAN></CODE> function.  The arguments to <A 
  title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> are as follows.</P>
  <P><EM>args</EM> should be a sequence of program arguments or else a single 
  string. By default, the program to execute is the first item in <EM>args</EM> 
  if <EM>args</EM> is a sequence.  If <EM>args</EM> is a string, the 
  interpretation is platform-dependent and described below.  See the 
  <EM>shell</EM> and <EM>executable</EM> arguments for additional differences 
  from the default behavior.  Unless otherwise stated, it is recommended to pass 
  <EM>args</EM> as a sequence.</P>
  <P>On Unix, if <EM>args</EM> is a string, the string is interpreted as the 
  name or path of the program to execute.  However, this can only be done if not
   passing arguments to the program.</P>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P><A title="shlex.split" class="reference internal" href="https://docs.python.org/2/library/shlex.html#shlex.split"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">shlex.split()</SPAN></CODE></A> can be useful when determining the 
  correct tokenization for <EM>args</EM>, especially in complex cases:</P> 
  <DIV class="highlight-python">
  <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="kn">import</SPAN> <SPAN class="nn">shlex</SPAN><SPAN class="o">,</SPAN> <SPAN class="nn">subprocess</SPAN>
<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">command_line</SPAN> <SPAN class="o">=</SPAN> <SPAN class="nb">raw_input</SPAN><SPAN class="p">()</SPAN>
<SPAN class="go">/bin/vikings -input eggs.txt -output "spam spam.txt" -cmd "echo '$MONEY'"</SPAN>
<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">args</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">shlex</SPAN><SPAN class="o">.</SPAN><SPAN class="n">split</SPAN><SPAN class="p">(</SPAN><SPAN class="n">command_line</SPAN><SPAN class="p">)</SPAN>
<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="k">print</SPAN> <SPAN class="n">args</SPAN>
<SPAN class="go">['/bin/vikings', '-input', 'eggs.txt', '-output', 'spam spam.txt', '-cmd', "echo '$MONEY'"]</SPAN>
<SPAN class="gp">&gt;&gt;&gt; </SPAN><SPAN class="n">p</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">Popen</SPAN><SPAN class="p">(</SPAN><SPAN class="n">args</SPAN><SPAN class="p">)</SPAN> <SPAN class="c1"># Success!</SPAN>
</PRE></DIV></DIV>
  <P class="last">Note in particular that options (such as <EM>-input</EM>) and 
  arguments (such as <EM>eggs.txt</EM>) that are separated by whitespace in the 
  shell go in separate list elements, while arguments that need quoting or 
  backslash escaping when used in the shell (such as filenames containing spaces 
  or the <EM>echo</EM> command shown above) are single list elements.</P></DIV>
  <P>On Windows, if <EM>args</EM> is a sequence, it will be converted to a 
  string in a manner described in <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#converting-argument-sequence"><SPAN>Converting 
  an argument sequence to a string on Windows</SPAN></A>.  This is because the 
  underlying <CODE class="docutils literal"><SPAN 
  class="pre">CreateProcess()</SPAN></CODE> operates on strings.</P>
  <P>The <EM>shell</EM> argument (which defaults to <CODE class="docutils literal"><SPAN 
  class="pre">False</SPAN></CODE>) specifies whether to use the shell as the 
  program to execute.  If <EM>shell</EM> is <CODE class="docutils literal"><SPAN 
  class="pre">True</SPAN></CODE>, it is recommended to pass <EM>args</EM> as a 
  string rather than as a sequence.</P>
  <P>On Unix with <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE>, the shell defaults to <CODE class="file docutils literal"><SPAN 
  class="pre">/bin/sh</SPAN></CODE>.  If <EM>args</EM> is a string, the string 
  specifies the command to execute through the shell.  This means that the 
  string must be formatted exactly as it would be when typed at the shell 
  prompt.  This includes, for example, quoting or backslash escaping filenames 
  with spaces in them.  If <EM>args</EM> is a sequence, the first item specifies 
  the command string, and any additional items will be treated as additional 
  arguments to the shell itself.  That is to say, <A title="subprocess.Popen" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> does the equivalent of:</P>
  <DIV class="highlight-python">
  <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="n">Popen</SPAN><SPAN class="p">([</SPAN><SPAN class="s1">'/bin/sh'</SPAN><SPAN class="p">,</SPAN> <SPAN class="s1">'-c'</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">args</SPAN><SPAN class="p">[</SPAN><SPAN class="mi">0</SPAN><SPAN class="p">],</SPAN> <SPAN class="n">args</SPAN><SPAN class="p">[</SPAN><SPAN class="mi">1</SPAN><SPAN class="p">],</SPAN> <SPAN class="o">...</SPAN><SPAN class="p">])</SPAN>
</PRE></DIV></DIV>
  <P>On Windows with <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE>, the <SPAN class="target" 
  id="index-2"></SPAN><CODE class="xref std std-envvar docutils literal"><SPAN 
  class="pre">COMSPEC</SPAN></CODE> environment variable specifies the default 
  shell.  The only time you need to specify <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE> on Windows is when the command you wish 
  to execute is built into the shell (e.g. <STRONG class="command">dir</STRONG> 
  or <STRONG class="command">copy</STRONG>).  You do not need <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE> to run a batch file or console-based 
  executable.</P>
  <DIV class="admonition warning">
  <P class="first admonition-title">Warning</P> 
  <P class="last">Passing <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE> can be a security hazard if combined with
   untrusted input.  See the warning under <A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments"><SPAN>Frequently 
  Used Arguments</SPAN></A> for details.</P> </DIV>
  <P><EM>bufsize</EM>, if given, has the same meaning as the corresponding 
  argument to the built-in open() function: <CODE class="xref py py-const docutils literal"><SPAN 
  class="pre">0</SPAN></CODE> means unbuffered, <CODE class="xref py py-const docutils literal"><SPAN 
  class="pre">1</SPAN></CODE> means line buffered, any other positive value 
  means use a buffer of (approximately) that size.  A negative <EM>bufsize</EM> 
  means to use the system default, which usually means fully buffered.  The 
  default value for <EM>bufsize</EM> is <CODE class="xref py py-const docutils literal"><SPAN 
  class="pre">0</SPAN></CODE> (unbuffered).</P>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">If you experience performance issues, it is recommended that 
  you try to enable buffering by setting <EM>bufsize</EM> to either -1 or a 
  large enough positive value (such as 4096).</P> </DIV>
  <P>The <EM>executable</EM> argument specifies a replacement program to 
  execute.   It is very seldom needed.  When <CODE 
  class="docutils literal"><SPAN class="pre">shell=False</SPAN></CODE>, 
  <EM>executable</EM> replaces the program to execute specified by 
  <EM>args</EM>.  However, the original <EM>args</EM> is still passed to the 
  program.  Most programs treat the program specified by <EM>args</EM> as the 
  command name, which can then be different from the program actually executed.  
  On Unix, the <EM>args</EM> name becomes the display name for the executable in 
  utilities such as <STRONG class="program">ps</STRONG>.  If <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE>, on Unix the <EM>executable</EM> argument
   specifies a replacement shell for the default <CODE class="file docutils literal"><SPAN 
  class="pre">/bin/sh</SPAN></CODE>.</P>
  <P><EM>stdin</EM>, <EM>stdout</EM> and <EM>stderr</EM> specify the executed 
  program’s standard input, standard output and standard error file handles, 
  respectively.  Valid values are <A title="subprocess.PIPE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">PIPE</SPAN></CODE></A>, an existing file descriptor (a positive 
  integer), an existing file object, and <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>.  <A title="subprocess.PIPE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">PIPE</SPAN></CODE></A> indicates that a new pipe to the child 
  should be created.  With the default settings of <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>, no redirection will occur; the child’s file 
  handles will be inherited from the parent.  Additionally, <EM>stderr</EM> can 
  be <A title="subprocess.STDOUT" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STDOUT"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">STDOUT</SPAN></CODE></A>, which indicates that the stderr data 
  from the child process should be captured into the same file handle as for 
  stdout.</P>
  <P>If <EM>preexec_fn</EM> is set to a callable object, this object will be 
  called in the child process just before the child is executed. (Unix only)</P>
  <P>If <EM>close_fds</EM> is true, all file descriptors except <CODE class="xref py py-const docutils literal"><SPAN 
  class="pre">0</SPAN></CODE>, <CODE 
  class="xref py py-const docutils literal"><SPAN class="pre">1</SPAN></CODE> 
  and <CODE class="xref py py-const docutils literal"><SPAN 
  class="pre">2</SPAN></CODE> will be closed before the child process is 
  executed. (Unix only). Or, on Windows, if <EM>close_fds</EM> is true then no 
  handles will be inherited by the child process.  Note that on Windows, you 
  cannot set <EM>close_fds</EM> to true and also redirect the standard handles 
  by setting <EM>stdin</EM>, <EM>stdout</EM> or <EM>stderr</EM>.</P>
  <P>If <EM>cwd</EM> is not <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>, the child’s current directory will be changed 
  to <EM>cwd</EM> before it is executed.  Note that this directory is not 
  considered when searching the executable, so you can’t specify the program’s 
  path relative to <EM>cwd</EM>.</P>
  <P>If <EM>env</EM> is not <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>, it must be a mapping that defines the 
  environment variables for the new process; these are used instead of 
  inheriting the current process’ environment, which is the default 
behavior.</P>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">If specified, <EM>env</EM> must provide any variables required
   for the program to execute.  On Windows, in order to run a <A class="reference external" 
  href="https://en.wikipedia.org/wiki/Side-by-Side_Assembly">side-by-side 
  assembly</A> the specified <EM>env</EM> <STRONG>must</STRONG> include a valid 
  <SPAN class="target" id="index-3"></SPAN><CODE class="xref std std-envvar docutils literal"><SPAN 
  class="pre">SystemRoot</SPAN></CODE>.</P> </DIV>
  <P>If <EM>universal_newlines</EM> is <CODE class="docutils literal"><SPAN 
  class="pre">True</SPAN></CODE>, the file objects <EM>stdout</EM> and 
  <EM>stderr</EM> are opened as text files in <A class="reference internal" 
  href="https://docs.python.org/2/glossary.html#term-universal-newlines"><SPAN 
  class="xref std std-term">universal newlines</SPAN></A> mode.  Lines may be
   terminated by any of <CODE class="docutils literal"><SPAN 
  class="pre">'\n'</SPAN></CODE>, the Unix end-of-line convention, <CODE class="docutils literal"><SPAN 
  class="pre">'\r'</SPAN></CODE>, the old Macintosh convention or <CODE class="docutils literal"><SPAN 
  class="pre">'\r\n'</SPAN></CODE>, the Windows convention. All of these 
  external representations are seen as <CODE class="docutils literal"><SPAN 
  class="pre">'\n'</SPAN></CODE> by the Python program.</P>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">This feature is only available if Python is built with 
  universal newline support (the default).  Also, the newlines attribute of the 
  file objects <A title="subprocess.Popen.stdout" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdout"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">stdout</SPAN></CODE></A>, <A title="subprocess.Popen.stdin" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdin"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">stdin</SPAN></CODE></A> and <A title="subprocess.Popen.stderr" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stderr"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">stderr</SPAN></CODE></A> are not updated by the communicate() 
  method.</P> </DIV>
  <P>If given, <EM>startupinfo</EM> will be a <A title="subprocess.STARTUPINFO" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">STARTUPINFO</SPAN></CODE></A> object, which is passed to the 
  underlying <CODE class="docutils literal"><SPAN 
  class="pre">CreateProcess</SPAN></CODE> function. <EM>creationflags</EM>, if 
  given, can be <A title="subprocess.CREATE_NEW_CONSOLE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.CREATE_NEW_CONSOLE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">CREATE_NEW_CONSOLE</SPAN></CODE></A> or <A title="subprocess.CREATE_NEW_PROCESS_GROUP" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CREATE_NEW_PROCESS_GROUP"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">CREATE_NEW_PROCESS_GROUP</SPAN></CODE></A>. (Windows 
only)</P></DD></DL></DIV>
<DIV class="section" id="exceptions">
<H3>17.1.1.3. Exceptions<A title="Permalink to this headline" class="headerlink" 
href="https://docs.python.org/2/library/subprocess.html#exceptions">¶</A></H3>
<P>Exceptions raised in the child process, before the new program has started to
 execute, will be re-raised in the parent.  Additionally, the exception object
 will have one extra attribute called <CODE class="xref py py-attr docutils literal"><SPAN 
class="pre">child_traceback</SPAN></CODE>, which is a string containing 
traceback information from the child’s point of view.</P>
<P>The most common exception raised is <A title="exceptions.OSError" class="reference internal" 
href="https://docs.python.org/2/library/exceptions.html#exceptions.OSError"><CODE 
class="xref py py-exc docutils literal"><SPAN 
class="pre">OSError</SPAN></CODE></A>.  This occurs, for example, when trying to 
execute a non-existent file.  Applications should prepare for <A title="exceptions.OSError" 
class="reference internal" href="https://docs.python.org/2/library/exceptions.html#exceptions.OSError"><CODE 
class="xref py py-exc docutils literal"><SPAN 
class="pre">OSError</SPAN></CODE></A> exceptions.</P>
<P>A <A title="exceptions.ValueError" class="reference internal" href="https://docs.python.org/2/library/exceptions.html#exceptions.ValueError"><CODE 
class="xref py py-exc docutils literal"><SPAN 
class="pre">ValueError</SPAN></CODE></A> will be raised if <A title="subprocess.Popen" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">Popen</SPAN></CODE></A> is called with invalid arguments.</P>
<P><A title="subprocess.check_call" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_call"><CODE 
class="xref py py-func docutils literal"><SPAN 
class="pre">check_call()</SPAN></CODE></A> and <A title="subprocess.check_output" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output"><CODE 
class="xref py py-func docutils literal"><SPAN 
class="pre">check_output()</SPAN></CODE></A> will raise <A title="subprocess.CalledProcessError" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError"><CODE 
class="xref py py-exc docutils literal"><SPAN 
class="pre">CalledProcessError</SPAN></CODE></A> if the called process returns a 
non-zero return code.</P></DIV>
<DIV class="section" id="security">
<H3>17.1.1.4. Security<A title="Permalink to this headline" class="headerlink" 
href="https://docs.python.org/2/library/subprocess.html#security">¶</A></H3>
<P>Unlike some other popen functions, this implementation will never call a
 system shell implicitly.  This means that all characters, including shell
 metacharacters, can safely be passed to child processes. Obviously, if the
 shell is invoked explicitly, then it is the application’s responsibility to
 ensure that all whitespace and metacharacters are quoted 
appropriately.</P></DIV></DIV>
<DIV class="section" id="popen-objects">
<H2>17.1.2. Popen Objects<A title="Permalink to this headline" class="headerlink" 
href="https://docs.python.org/2/library/subprocess.html#popen-objects">¶</A></H2>
<P>Instances of the <A title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">Popen</SPAN></CODE></A> class have the following methods:</P>
<DL class="method">
  <DT id="subprocess.Popen.poll"><CODE class="descclassname">Popen.</CODE><CODE 
  class="descname">poll</CODE><SPAN class="sig-paren">(</SPAN><SPAN class="sig-paren">)</SPAN><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.poll">¶</A></DT>
  <DD>
  <P>Check if child process has terminated.  Set and return <A title="subprocess.Popen.returncode" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.returncode"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">returncode</SPAN></CODE></A> attribute.</P></DD></DL>
<DL class="method">
  <DT id="subprocess.Popen.wait"><CODE class="descclassname">Popen.</CODE><CODE 
  class="descname">wait</CODE><SPAN class="sig-paren">(</SPAN><SPAN class="sig-paren">)</SPAN><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.wait">¶</A></DT>
  <DD>
  <P>Wait for child process to terminate.  Set and return <A title="subprocess.Popen.returncode" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.returncode"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">returncode</SPAN></CODE></A> attribute.</P>
  <DIV class="admonition warning">
  <P class="first admonition-title">Warning</P> 
  <P class="last">This will deadlock when using <CODE 
  class="docutils literal"><SPAN class="pre">stdout=PIPE</SPAN></CODE> and/or 
  <CODE class="docutils literal"><SPAN class="pre">stderr=PIPE</SPAN></CODE> and 
  the child process generates enough output to a pipe such that it blocks 
  waiting for the OS pipe buffer to accept more data.  Use <A title="subprocess.Popen.communicate" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">communicate()</SPAN></CODE></A> to avoid that.</P> </DIV></DD></DL>
<DL class="method">
  <DT id="subprocess.Popen.communicate"><CODE 
  class="descclassname">Popen.</CODE><CODE 
  class="descname">communicate</CODE><SPAN 
  class="sig-paren">(</SPAN><EM>input=None</EM><SPAN 
  class="sig-paren">)</SPAN><A title="Permalink to this definition" class="headerlink" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate">¶</A></DT>
  <DD>
  <P>Interact with process: Send data to stdin.  Read data from stdout and 
  stderr, until end-of-file is reached.  Wait for process to terminate. The 
  optional <EM>input</EM> argument should be a string to be sent to the child 
  process, or <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>, if no data should be sent to the child.</P>
  <P><A title="subprocess.Popen.communicate" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">communicate()</SPAN></CODE></A> returns a tuple <CODE class="docutils literal"><SPAN 
  class="pre">(stdoutdata,</SPAN> <SPAN 
  class="pre">stderrdata)</SPAN></CODE>.</P>
  <P>Note that if you want to send data to the process’s stdin, you need to 
  create the Popen object with <CODE class="docutils literal"><SPAN 
  class="pre">stdin=PIPE</SPAN></CODE>.  Similarly, to get anything other than 
  <CODE class="docutils literal"><SPAN class="pre">None</SPAN></CODE> in the 
  result tuple, you need to give <CODE class="docutils literal"><SPAN class="pre">stdout=PIPE</SPAN></CODE> 
  and/or <CODE class="docutils literal"><SPAN 
  class="pre">stderr=PIPE</SPAN></CODE> too.</P>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">The data read is buffered in memory, so do not use this method 
  if the data size is large or unlimited.</P> </DIV></DD></DL>
<DL class="method">
  <DT id="subprocess.Popen.send_signal"><CODE 
  class="descclassname">Popen.</CODE><CODE 
  class="descname">send_signal</CODE><SPAN 
  class="sig-paren">(</SPAN><EM>signal</EM><SPAN class="sig-paren">)</SPAN><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.send_signal">¶</A></DT>
  <DD>
  <P>Sends the signal <EM>signal</EM> to the child.</P>
  <DIV class="admonition note">
  <P class="first admonition-title">Note</P> 
  <P class="last">On Windows, SIGTERM is an alias for <A title="subprocess.Popen.terminate" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.terminate"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">terminate()</SPAN></CODE></A>. CTRL_C_EVENT and CTRL_BREAK_EVENT 
  can be sent to processes started with a <EM>creationflags</EM> parameter which 
  includes <CITE>CREATE_NEW_PROCESS_GROUP</CITE>.</P> </DIV>
  <DIV class="versionadded">
  <P><SPAN class="versionmodified">New in version 2.6.</SPAN></P></DIV></DD></DL>
<DL class="method">
  <DT id="subprocess.Popen.terminate"><CODE 
  class="descclassname">Popen.</CODE><CODE 
  class="descname">terminate</CODE><SPAN class="sig-paren">(</SPAN><SPAN class="sig-paren">)</SPAN><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.terminate">¶</A></DT>
  <DD>
  <P>Stop the child. On Posix OSs the method sends SIGTERM to the child. On 
  Windows the Win32 API function <CODE 
  class="xref c c-func docutils literal"><SPAN 
  class="pre">TerminateProcess()</SPAN></CODE> is called to stop the child.</P>
  <DIV class="versionadded">
  <P><SPAN class="versionmodified">New in version 2.6.</SPAN></P></DIV></DD></DL>
<DL class="method">
  <DT id="subprocess.Popen.kill"><CODE class="descclassname">Popen.</CODE><CODE 
  class="descname">kill</CODE><SPAN class="sig-paren">(</SPAN><SPAN class="sig-paren">)</SPAN><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.kill">¶</A></DT>
  <DD>
  <P>Kills the child. On Posix OSs the function sends SIGKILL to the child. On 
  Windows <A title="subprocess.Popen.kill" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.kill"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">kill()</SPAN></CODE></A> is an alias for <A title="subprocess.Popen.terminate" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.terminate"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">terminate()</SPAN></CODE></A>.</P>
  <DIV class="versionadded">
  <P><SPAN class="versionmodified">New in version 2.6.</SPAN></P></DIV></DD></DL>
<P>The following attributes are also available:</P>
<DIV class="admonition warning">
<P class="first admonition-title">Warning</P> 
<P class="last">Use <A title="subprocess.Popen.communicate" class="reference internal" 
href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate"><CODE 
class="xref py py-meth docutils literal"><SPAN 
class="pre">communicate()</SPAN></CODE></A> rather than <A title="subprocess.Popen.stdin" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdin"><CODE 
class="xref py py-attr docutils literal"><SPAN 
class="pre">.stdin.write</SPAN></CODE></A>, <A title="subprocess.Popen.stdout" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdout"><CODE 
class="xref py py-attr docutils literal"><SPAN 
class="pre">.stdout.read</SPAN></CODE></A> or <A title="subprocess.Popen.stderr" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stderr"><CODE 
class="xref py py-attr docutils literal"><SPAN 
class="pre">.stderr.read</SPAN></CODE></A> to avoid deadlocks due to any of the 
other OS pipe buffers filling up and blocking the child process.</P> </DIV>
<DL class="attribute">
  <DT id="subprocess.Popen.stdin"><CODE class="descclassname">Popen.</CODE><CODE 
  class="descname">stdin</CODE><A title="Permalink to this definition" class="headerlink" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdin">¶</A></DT>
  <DD>
  <P>If the <EM>stdin</EM> argument was <A title="subprocess.PIPE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">PIPE</SPAN></CODE></A>, this attribute is a file object that 
  provides input to the child process.  Otherwise, it is <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>.</P></DD></DL>
<DL class="attribute">
  <DT id="subprocess.Popen.stdout"><CODE 
  class="descclassname">Popen.</CODE><CODE class="descname">stdout</CODE><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdout">¶</A></DT>
  <DD>
  <P>If the <EM>stdout</EM> argument was <A title="subprocess.PIPE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">PIPE</SPAN></CODE></A>, this attribute is a file object that 
  provides output from the child process.  Otherwise, it is <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>.</P></DD></DL>
<DL class="attribute">
  <DT id="subprocess.Popen.stderr"><CODE 
  class="descclassname">Popen.</CODE><CODE class="descname">stderr</CODE><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stderr">¶</A></DT>
  <DD>
  <P>If the <EM>stderr</EM> argument was <A title="subprocess.PIPE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.PIPE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">PIPE</SPAN></CODE></A>, this attribute is a file object that 
  provides error output from the child process.  Otherwise, it is <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE>.</P></DD></DL>
<DL class="attribute">
  <DT id="subprocess.Popen.pid"><CODE class="descclassname">Popen.</CODE><CODE 
  class="descname">pid</CODE><A title="Permalink to this definition" class="headerlink" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.pid">¶</A></DT>
  <DD>
  <P>The process ID of the child process.</P>
  <P>Note that if you set the <EM>shell</EM> argument to <CODE class="docutils literal"><SPAN 
  class="pre">True</SPAN></CODE>, this is the process ID of the spawned 
  shell.</P></DD></DL>
<DL class="attribute">
  <DT id="subprocess.Popen.returncode"><CODE 
  class="descclassname">Popen.</CODE><CODE class="descname">returncode</CODE><A 
  title="Permalink to this definition" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.returncode">¶</A></DT>
  <DD>
  <P>The child return code, set by <A title="subprocess.Popen.poll" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.poll"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">poll()</SPAN></CODE></A> and <A title="subprocess.Popen.wait" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.wait"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">wait()</SPAN></CODE></A> (and indirectly by <A title="subprocess.Popen.communicate" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate"><CODE 
  class="xref py py-meth docutils literal"><SPAN 
  class="pre">communicate()</SPAN></CODE></A>).  A <CODE class="docutils literal"><SPAN 
  class="pre">None</SPAN></CODE> value indicates that the process hasn’t 
  terminated yet.</P>
  <P>A negative value <CODE class="docutils literal"><SPAN 
  class="pre">-N</SPAN></CODE> indicates that the child was terminated by signal 
  <CODE class="docutils literal"><SPAN class="pre">N</SPAN></CODE> (Unix 
  only).</P></DD></DL></DIV>
<DIV class="section" id="windows-popen-helpers">
<H2>17.1.3. Windows Popen Helpers<A title="Permalink to this headline" class="headerlink" 
href="https://docs.python.org/2/library/subprocess.html#windows-popen-helpers">¶</A></H2>
<P>The <A title="subprocess.STARTUPINFO" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">STARTUPINFO</SPAN></CODE></A> class and following constants are only 
available on Windows.</P>
<DL class="class">
  <DT id="subprocess.STARTUPINFO"><EM class="property">class </EM><CODE class="descclassname">subprocess.</CODE><CODE 
  class="descname">STARTUPINFO</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO">¶</A></DT>
  <DD>
  <P>Partial support of the Windows <A class="reference external" href="https://msdn.microsoft.com/en-us/library/ms686331(v=vs.85).aspx">STARTUPINFO</A>
   structure is used for <A title="subprocess.Popen" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> creation.</P>
  <DL class="attribute">
    <DT id="subprocess.STARTUPINFO.dwFlags"><CODE 
    class="descname">dwFlags</CODE><A title="Permalink to this definition" 
    class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.dwFlags">¶</A></DT>
    <DD>
    <P>A bit field that determines whether certain <A title="subprocess.STARTUPINFO" 
    class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO"><CODE 
    class="xref py py-class docutils literal"><SPAN 
    class="pre">STARTUPINFO</SPAN></CODE></A> attributes are used when the 
    process creates a window.</P>
    <DIV class="highlight-python">
    <DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="n">si</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">STARTUPINFO</SPAN><SPAN class="p">()</SPAN>
<SPAN class="n">si</SPAN><SPAN class="o">.</SPAN><SPAN class="n">dwFlags</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">STARTF_USESTDHANDLES</SPAN> <SPAN class="o">|</SPAN> <SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">STARTF_USESHOWWINDOW</SPAN>
</PRE></DIV></DIV></DD></DL>
  <DL class="attribute">
    <DT id="subprocess.STARTUPINFO.hStdInput"><CODE 
    class="descname">hStdInput</CODE><A title="Permalink to this definition" 
    class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.hStdInput">¶</A></DT>
    <DD>
    <P>If <A title="subprocess.STARTUPINFO.dwFlags" class="reference internal" 
    href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.dwFlags"><CODE 
    class="xref py py-attr docutils literal"><SPAN 
    class="pre">dwFlags</SPAN></CODE></A> specifies <A title="subprocess.STARTF_USESTDHANDLES" 
    class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTF_USESTDHANDLES"><CODE 
    class="xref py py-data docutils literal"><SPAN 
    class="pre">STARTF_USESTDHANDLES</SPAN></CODE></A>, this attribute is the 
    standard input handle for the process. If <A title="subprocess.STARTF_USESTDHANDLES" 
    class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTF_USESTDHANDLES"><CODE 
    class="xref py py-data docutils literal"><SPAN 
    class="pre">STARTF_USESTDHANDLES</SPAN></CODE></A> is not specified, the 
    default for standard input is the keyboard buffer.</P></DD></DL>
  <DL class="attribute">
    <DT id="subprocess.STARTUPINFO.hStdOutput"><CODE 
    class="descname">hStdOutput</CODE><A title="Permalink to this definition" 
    class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.hStdOutput">¶</A></DT>
    <DD>
    <P>If <A title="subprocess.STARTUPINFO.dwFlags" class="reference internal" 
    href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.dwFlags"><CODE 
    class="xref py py-attr docutils literal"><SPAN 
    class="pre">dwFlags</SPAN></CODE></A> specifies <A title="subprocess.STARTF_USESTDHANDLES" 
    class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTF_USESTDHANDLES"><CODE 
    class="xref py py-data docutils literal"><SPAN 
    class="pre">STARTF_USESTDHANDLES</SPAN></CODE></A>, this attribute is the 
    standard output handle for the process. Otherwise, this attribute is ignored 
    and the default for standard output is the console window’s
   buffer.</P></DD></DL>
  <DL class="attribute">
    <DT id="subprocess.STARTUPINFO.hStdError"><CODE 
    class="descname">hStdError</CODE><A title="Permalink to this definition" 
    class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.hStdError">¶</A></DT>
    <DD>
    <P>If <A title="subprocess.STARTUPINFO.dwFlags" class="reference internal" 
    href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.dwFlags"><CODE 
    class="xref py py-attr docutils literal"><SPAN 
    class="pre">dwFlags</SPAN></CODE></A> specifies <A title="subprocess.STARTF_USESTDHANDLES" 
    class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTF_USESTDHANDLES"><CODE 
    class="xref py py-data docutils literal"><SPAN 
    class="pre">STARTF_USESTDHANDLES</SPAN></CODE></A>, this attribute is the 
    standard error handle for the process. Otherwise, this attribute is ignored 
    and the default for standard error is the console window’s 
  buffer.</P></DD></DL>
  <DL class="attribute">
    <DT id="subprocess.STARTUPINFO.wShowWindow"><CODE 
    class="descname">wShowWindow</CODE><A title="Permalink to this definition" 
    class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.wShowWindow">¶</A></DT>
    <DD>
    <P>If <A title="subprocess.STARTUPINFO.dwFlags" class="reference internal" 
    href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.dwFlags"><CODE 
    class="xref py py-attr docutils literal"><SPAN 
    class="pre">dwFlags</SPAN></CODE></A> specifies <A title="subprocess.STARTF_USESHOWWINDOW" 
    class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTF_USESHOWWINDOW"><CODE 
    class="xref py py-data docutils literal"><SPAN 
    class="pre">STARTF_USESHOWWINDOW</SPAN></CODE></A>, this attribute can be 
    any of the values that can be specified in the <CODE class="docutils literal"><SPAN 
    class="pre">nCmdShow</SPAN></CODE> parameter for the <A class="reference external" 
    href="https://msdn.microsoft.com/en-us/library/ms633548(v=vs.85).aspx">ShowWindow</A>
     function, except for <CODE class="docutils literal"><SPAN 
    class="pre">SW_SHOWDEFAULT</SPAN></CODE>. Otherwise, this attribute is
     ignored.</P>
    <P><A title="subprocess.SW_HIDE" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.SW_HIDE"><CODE 
    class="xref py py-data docutils literal"><SPAN 
    class="pre">SW_HIDE</SPAN></CODE></A> is provided for this attribute. It is 
    used when <A title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
    class="xref py py-class docutils literal"><SPAN 
    class="pre">Popen</SPAN></CODE></A> is called with <CODE class="docutils literal"><SPAN 
    class="pre">shell=True</SPAN></CODE>.</P></DD></DL></DD></DL>
<DIV class="section" id="constants">
<H3>17.1.3.1. Constants<A title="Permalink to this headline" class="headerlink" 
href="https://docs.python.org/2/library/subprocess.html#constants">¶</A></H3>
<P>The <A title="subprocess: Subprocess management." class="reference internal" 
href="https://docs.python.org/2/library/subprocess.html#module-subprocess"><CODE 
class="xref py py-mod docutils literal"><SPAN 
class="pre">subprocess</SPAN></CODE></A> module exposes the following 
constants.</P>
<DL class="data">
  <DT id="subprocess.STD_INPUT_HANDLE"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">STD_INPUT_HANDLE</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STD_INPUT_HANDLE">¶</A></DT>
  <DD>
  <P>The standard input device. Initially, this is the console input buffer, 
  <CODE class="docutils literal"><SPAN 
class="pre">CONIN$</SPAN></CODE>.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.STD_OUTPUT_HANDLE"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">STD_OUTPUT_HANDLE</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STD_OUTPUT_HANDLE">¶</A></DT>
  <DD>
  <P>The standard output device. Initially, this is the active console screen
   buffer, <CODE class="docutils literal"><SPAN 
  class="pre">CONOUT$</SPAN></CODE>.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.STD_ERROR_HANDLE"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">STD_ERROR_HANDLE</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STD_ERROR_HANDLE">¶</A></DT>
  <DD>
  <P>The standard error device. Initially, this is the active console screen
   buffer, <CODE class="docutils literal"><SPAN 
  class="pre">CONOUT$</SPAN></CODE>.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.SW_HIDE"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">SW_HIDE</CODE><A title="Permalink to this definition" class="headerlink" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.SW_HIDE">¶</A></DT>
  <DD>
  <P>Hides the window. Another window will be activated.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.STARTF_USESTDHANDLES"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">STARTF_USESTDHANDLES</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTF_USESTDHANDLES">¶</A></DT>
  <DD>
  <P>Specifies that the <A title="subprocess.STARTUPINFO.hStdInput" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.hStdInput"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">STARTUPINFO.hStdInput</SPAN></CODE></A>, <A title="subprocess.STARTUPINFO.hStdOutput" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.hStdOutput"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">STARTUPINFO.hStdOutput</SPAN></CODE></A>, and <A title="subprocess.STARTUPINFO.hStdError" 
  class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.hStdError"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">STARTUPINFO.hStdError</SPAN></CODE></A> attributes contain 
  additional information.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.STARTF_USESHOWWINDOW"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">STARTF_USESHOWWINDOW</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTF_USESHOWWINDOW">¶</A></DT>
  <DD>
  <P>Specifies that the <A title="subprocess.STARTUPINFO.wShowWindow" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.STARTUPINFO.wShowWindow"><CODE 
  class="xref py py-attr docutils literal"><SPAN 
  class="pre">STARTUPINFO.wShowWindow</SPAN></CODE></A> attribute contains
   additional information.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.CREATE_NEW_CONSOLE"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">CREATE_NEW_CONSOLE</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.CREATE_NEW_CONSOLE">¶</A></DT>
  <DD>
  <P>The new process has a new console, instead of inheriting its parent’s
   console (the default).</P>
  <P>This flag is always set when <A title="subprocess.Popen" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> is created with <CODE class="docutils literal"><SPAN 
  class="pre">shell=True</SPAN></CODE>.</P></DD></DL>
<DL class="data">
  <DT id="subprocess.CREATE_NEW_PROCESS_GROUP"><CODE 
  class="descclassname">subprocess.</CODE><CODE 
  class="descname">CREATE_NEW_PROCESS_GROUP</CODE><A title="Permalink to this definition" 
  class="headerlink" href="https://docs.python.org/2/library/subprocess.html#subprocess.CREATE_NEW_PROCESS_GROUP">¶</A></DT>
  <DD>
  <P>A <A title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> <CODE class="docutils literal"><SPAN 
  class="pre">creationflags</SPAN></CODE> parameter to specify that a new 
  process group will be created. This flag is necessary for using <A title="os.kill" 
  class="reference internal" href="https://docs.python.org/2/library/os.html#os.kill"><CODE 
  class="xref py py-func docutils literal"><SPAN 
  class="pre">os.kill()</SPAN></CODE></A> on the subprocess.</P>
  <P>This flag is ignored if <A title="subprocess.CREATE_NEW_CONSOLE" class="reference internal" 
  href="https://docs.python.org/2/library/subprocess.html#subprocess.CREATE_NEW_CONSOLE"><CODE 
  class="xref py py-data docutils literal"><SPAN 
  class="pre">CREATE_NEW_CONSOLE</SPAN></CODE></A> is 
specified.</P></DD></DL></DIV></DIV>
<DIV class="section" 
id="replacing-older-functions-with-the-subprocess-module"><SPAN id="subprocess-replacements"></SPAN>
<H2>17.1.4. Replacing Older Functions with the <A title="subprocess: Subprocess management." 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#module-subprocess"><CODE 
class="xref py py-mod docutils literal"><SPAN 
class="pre">subprocess</SPAN></CODE></A> Module<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module">¶</A></H2>
<P>In this section, “a becomes b” means that b can be used as a replacement for 
a.</P>
<DIV class="admonition note">
<P class="first admonition-title">Note</P> 
<P>All “a” functions in this section fail (more or less) silently if the
 executed program cannot be found; the “b” replacements raise <A title="exceptions.OSError" 
class="reference internal" href="https://docs.python.org/2/library/exceptions.html#exceptions.OSError"><CODE 
class="xref py py-exc docutils literal"><SPAN 
class="pre">OSError</SPAN></CODE></A> instead.</P> 
<P class="last">In addition, the replacements using <A title="subprocess.check_output" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output"><CODE 
class="xref py py-func docutils literal"><SPAN 
class="pre">check_output()</SPAN></CODE></A> will fail with a <A title="subprocess.CalledProcessError" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError"><CODE 
class="xref py py-exc docutils literal"><SPAN 
class="pre">CalledProcessError</SPAN></CODE></A> if the requested operation 
produces a non-zero return code. The output is still available as the <A title="subprocess.CalledProcessError.output" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.CalledProcessError.output"><CODE 
class="xref py py-attr docutils literal"><SPAN 
class="pre">output</SPAN></CODE></A> attribute of the raised 
exception.</P></DIV>
<P>In the following examples, we assume that the relevant functions have already
 been imported from the <A title="subprocess: Subprocess management." class="reference internal" 
href="https://docs.python.org/2/library/subprocess.html#module-subprocess"><CODE 
class="xref py py-mod docutils literal"><SPAN 
class="pre">subprocess</SPAN></CODE></A> module.</P>
<DIV class="section" id="replacing-bin-sh-shell-backquote">
<H3>17.1.4.1. Replacing /bin/sh shell backquote<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#replacing-bin-sh-shell-backquote">¶</A></H3>
<DIV class="highlight-bash">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="nv">output</SPAN><SPAN class="o">=</SPAN><SPAN class="sb">`</SPAN>mycmd myarg<SPAN class="sb">`</SPAN>
</PRE></DIV></DIV>
<P>becomes:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="n">output</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">check_output</SPAN><SPAN class="p">([</SPAN><SPAN class="s2">"mycmd"</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"myarg"</SPAN><SPAN class="p">])</SPAN>
</PRE></DIV></DIV></DIV>
<DIV class="section" id="replacing-shell-pipeline">
<H3>17.1.4.2. Replacing shell pipeline<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#replacing-shell-pipeline">¶</A></H3>
<DIV class="highlight-bash">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="nv">output</SPAN><SPAN class="o">=</SPAN><SPAN class="sb">`</SPAN>dmesg <SPAN class="p">|</SPAN> grep hda<SPAN class="sb">`</SPAN>
</PRE></DIV></DIV>
<P>becomes:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="n">p1</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Popen</SPAN><SPAN class="p">([</SPAN><SPAN class="s2">"dmesg"</SPAN><SPAN class="p">],</SPAN> <SPAN class="n">stdout</SPAN><SPAN class="o">=</SPAN><SPAN class="n">PIPE</SPAN><SPAN class="p">)</SPAN>
<SPAN class="n">p2</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">Popen</SPAN><SPAN class="p">([</SPAN><SPAN class="s2">"grep"</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"hda"</SPAN><SPAN class="p">],</SPAN> <SPAN class="n">stdin</SPAN><SPAN class="o">=</SPAN><SPAN class="n">p1</SPAN><SPAN class="o">.</SPAN><SPAN class="n">stdout</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">stdout</SPAN><SPAN class="o">=</SPAN><SPAN class="n">PIPE</SPAN><SPAN class="p">)</SPAN>
<SPAN class="n">p1</SPAN><SPAN class="o">.</SPAN><SPAN class="n">stdout</SPAN><SPAN class="o">.</SPAN><SPAN class="n">close</SPAN><SPAN class="p">()</SPAN>  <SPAN class="c1"># Allow p1 to receive a SIGPIPE if p2 exits.</SPAN>
<SPAN class="n">output</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">p2</SPAN><SPAN class="o">.</SPAN><SPAN class="n">communicate</SPAN><SPAN class="p">()[</SPAN><SPAN class="mi">0</SPAN><SPAN class="p">]</SPAN>
</PRE></DIV></DIV>
<P>The p1.stdout.close() call after starting the p2 is important in order for p1
 to receive a SIGPIPE if p2 exits before p1.</P>
<P>Alternatively, for trusted input, the shell’s own pipeline support may still
 be used directly:</P>
<DIV class="highlight-bash">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="nv">output</SPAN><SPAN class="o">=</SPAN><SPAN class="sb">`</SPAN>dmesg <SPAN class="p">|</SPAN> grep hda<SPAN class="sb">`</SPAN>
</PRE></DIV></DIV>
<P>becomes:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="n">output</SPAN><SPAN class="o">=</SPAN><SPAN class="n">check_output</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"dmesg | grep hda"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN>
</PRE></DIV></DIV></DIV>
<DIV class="section" id="replacing-os-system">
<H3>17.1.4.3. Replacing <A title="os.system" class="reference internal" href="https://docs.python.org/2/library/os.html#os.system"><CODE 
class="xref py py-func docutils literal"><SPAN 
class="pre">os.system()</SPAN></CODE></A><A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#replacing-os-system">¶</A></H3>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="n">status</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">os</SPAN><SPAN class="o">.</SPAN><SPAN class="n">system</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"mycmd"</SPAN> <SPAN class="o">+</SPAN> <SPAN class="s2">" myarg"</SPAN><SPAN class="p">)</SPAN>
<SPAN class="c1"># becomes</SPAN>
<SPAN class="n">status</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">subprocess</SPAN><SPAN class="o">.</SPAN><SPAN class="n">call</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"mycmd"</SPAN> <SPAN class="o">+</SPAN> <SPAN class="s2">" myarg"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN>
</PRE></DIV></DIV>
<P>Notes:</P>
<UL class="simple">
  <LI>Calling the program through the shell is usually not required.</LI></UL>
<P>A more realistic example would look like this:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN><SPAN class="k">try</SPAN><SPAN class="p">:</SPAN>
    <SPAN class="n">retcode</SPAN> <SPAN class="o">=</SPAN> <SPAN class="n">call</SPAN><SPAN class="p">(</SPAN><SPAN class="s2">"mycmd"</SPAN> <SPAN class="o">+</SPAN> <SPAN class="s2">" myarg"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">shell</SPAN><SPAN class="o">=</SPAN><SPAN class="bp">True</SPAN><SPAN class="p">)</SPAN>
    <SPAN class="k">if</SPAN> <SPAN class="n">retcode</SPAN> <SPAN class="o">&lt;</SPAN> <SPAN class="mi">0</SPAN><SPAN class="p">:</SPAN>
        <SPAN class="k">print</SPAN> <SPAN class="o">&gt;&gt;</SPAN><SPAN class="n">sys</SPAN><SPAN class="o">.</SPAN><SPAN class="n">stderr</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"Child was terminated by signal"</SPAN><SPAN class="p">,</SPAN> <SPAN class="o">-</SPAN><SPAN class="n">retcode</SPAN>
    <SPAN class="k">else</SPAN><SPAN class="p">:</SPAN>
        <SPAN class="k">print</SPAN> <SPAN class="o">&gt;&gt;</SPAN><SPAN class="n">sys</SPAN><SPAN class="o">.</SPAN><SPAN class="n">stderr</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"Child returned"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">retcode</SPAN>
<SPAN class="k">except</SPAN> <SPAN class="ne">OSError</SPAN> <SPAN class="k">as</SPAN> <SPAN class="n">e</SPAN><SPAN class="p">:</SPAN>
    <SPAN class="k">print</SPAN> <SPAN class="o">&gt;&gt;</SPAN><SPAN class="n">sys</SPAN><SPAN class="o">.</SPAN><SPAN class="n">stderr</SPAN><SPAN class="p">,</SPAN> <SPAN class="s2">"Execution failed:"</SPAN><SPAN class="p">,</SPAN> <SPAN class="n">e</SPAN>
</PRE></DIV></DIV></DIV>
<DIV class="section" id="replacing-the-os-spawn-family">
<H3>17.1.4.4. Replacing the <A title="os.spawnl" class="reference internal" 
href="https://docs.python.org/2/library/os.html#os.spawnl"><CODE class="xref py py-func docutils literal"><SPAN 
class="pre">os.spawn</SPAN></CODE></A> family<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#replacing-the-os-spawn-family">¶</A></H3>
<P>P_NOWAIT example:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>pid = os.spawnlp(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg")
==&gt;
pid = Popen(["/bin/mycmd", "myarg"]).pid
</PRE></DIV></DIV>
<P>P_WAIT example:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>retcode = os.spawnlp(os.P_WAIT, "/bin/mycmd", "mycmd", "myarg")
==&gt;
retcode = call(["/bin/mycmd", "myarg"])
</PRE></DIV></DIV>
<P>Vector example:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>os.spawnvp(os.P_NOWAIT, path, args)
==&gt;
Popen([path] + args[1:])
</PRE></DIV></DIV>
<P>Environment example:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>os.spawnlpe(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg", env)
==&gt;
Popen(["/bin/mycmd", "myarg"], env={"PATH": "/usr/bin"})
</PRE></DIV></DIV></DIV>
<DIV class="section" id="replacing-os-popen-os-popen2-os-popen3">
<H3>17.1.4.5. Replacing <A title="os.popen" class="reference internal" href="https://docs.python.org/2/library/os.html#os.popen"><CODE 
class="xref py py-func docutils literal"><SPAN 
class="pre">os.popen()</SPAN></CODE></A>, <A title="os.popen2" class="reference internal" 
href="https://docs.python.org/2/library/os.html#os.popen2"><CODE class="xref py py-func docutils literal"><SPAN 
class="pre">os.popen2()</SPAN></CODE></A>, <A title="os.popen3" class="reference internal" 
href="https://docs.python.org/2/library/os.html#os.popen3"><CODE class="xref py py-func docutils literal"><SPAN 
class="pre">os.popen3()</SPAN></CODE></A><A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3">¶</A></H3>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>pipe = os.popen("cmd", 'r', bufsize)
==&gt;
pipe = Popen("cmd", shell=True, bufsize=bufsize, stdout=PIPE).stdout
</PRE></DIV></DIV>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>pipe = os.popen("cmd", 'w', bufsize)
==&gt;
pipe = Popen("cmd", shell=True, bufsize=bufsize, stdin=PIPE).stdin
</PRE></DIV></DIV>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>(child_stdin, child_stdout) = os.popen2("cmd", mode, bufsize)
==&gt;
p = Popen("cmd", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdin, child_stdout) = (p.stdin, p.stdout)
</PRE></DIV></DIV>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>(child_stdin,
 child_stdout,
 child_stderr) = os.popen3("cmd", mode, bufsize)
==&gt;
p = Popen("cmd", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
(child_stdin,
 child_stdout,
 child_stderr) = (p.stdin, p.stdout, p.stderr)
</PRE></DIV></DIV>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>(child_stdin, child_stdout_and_stderr) = os.popen4("cmd", mode,
                                                   bufsize)
==&gt;
p = Popen("cmd", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)
</PRE></DIV></DIV>
<P>On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as the 
command to execute, in which case arguments will be passed directly to the 
program without shell intervention.  This usage can be replaced as follows:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>(child_stdin, child_stdout) = os.popen2(["/bin/ls", "-l"], mode,
                                        bufsize)
==&gt;
p = Popen(["/bin/ls", "-l"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)
(child_stdin, child_stdout) = (p.stdin, p.stdout)
</PRE></DIV></DIV>
<P>Return code handling translates as follows:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>pipe = os.popen("cmd", 'w')
...
rc = pipe.close()
if rc is not None and rc &gt;&gt; 8:
    print "There were some errors"
==&gt;
process = Popen("cmd", shell=True, stdin=PIPE)
...
process.stdin.close()
if process.wait() != 0:
    print "There were some errors"
</PRE></DIV></DIV></DIV>
<DIV class="section" id="replacing-functions-from-the-popen2-module">
<H3>17.1.4.6. Replacing functions from the <A title="popen2: Subprocesses with accessible standard I/O streams. (deprecated)" 
class="reference internal" href="https://docs.python.org/2/library/popen2.html#module-popen2"><CODE 
class="xref py py-mod docutils literal"><SPAN 
class="pre">popen2</SPAN></CODE></A> module<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#replacing-functions-from-the-popen2-module">¶</A></H3>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>(child_stdout, child_stdin) = popen2.popen2("somestring", bufsize, mode)
==&gt;
p = Popen("somestring", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)
</PRE></DIV></DIV>
<P>On Unix, popen2 also accepts a sequence as the command to execute, in which 
case arguments will be passed directly to the program without shell 
intervention.  This usage can be replaced as follows:</P>
<DIV class="highlight-python">
<DIV class="highlight">
<PRE><SPAN></SPAN>(child_stdout, child_stdin) = popen2.popen2(["mycmd", "myarg"], bufsize,
                                            mode)
==&gt;
p = Popen(["mycmd", "myarg"], bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)
</PRE></DIV></DIV>
<P><A title="popen2.Popen3" class="reference internal" href="https://docs.python.org/2/library/popen2.html#popen2.Popen3"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">popen2.Popen3</SPAN></CODE></A> and <A title="popen2.Popen4" class="reference internal" 
href="https://docs.python.org/2/library/popen2.html#popen2.Popen4"><CODE class="xref py py-class docutils literal"><SPAN 
class="pre">popen2.Popen4</SPAN></CODE></A> basically work as <A title="subprocess.Popen" 
class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
class="xref py py-class docutils literal"><SPAN 
class="pre">subprocess.Popen</SPAN></CODE></A>, except that:</P>
<UL class="simple">
  <LI><A title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A> raises an exception if the execution 
  fails.</LI>
  <LI>the <EM>capturestderr</EM> argument is replaced with the <EM>stderr</EM> 
  argument.</LI>
  <LI><CODE class="docutils literal"><SPAN class="pre">stdin=PIPE</SPAN></CODE> 
  and <CODE class="docutils literal"><SPAN class="pre">stdout=PIPE</SPAN></CODE> 
  must be specified.</LI>
  <LI>popen2 closes all file descriptors by default, but you have to specify 
  <CODE class="docutils literal"><SPAN class="pre">close_fds=True</SPAN></CODE> 
  with <A title="subprocess.Popen" class="reference internal" href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen"><CODE 
  class="xref py py-class docutils literal"><SPAN 
  class="pre">Popen</SPAN></CODE></A>.</LI></UL></DIV></DIV>
<DIV class="section" id="notes">
<H2>17.1.5. Notes<A title="Permalink to this headline" class="headerlink" href="https://docs.python.org/2/library/subprocess.html#notes">¶</A></H2>
<DIV class="section" 
id="converting-an-argument-sequence-to-a-string-on-windows"><SPAN id="converting-argument-sequence"></SPAN>
<H3>17.1.5.1. Converting an argument sequence to a string on Windows<A title="Permalink to this headline" 
class="headerlink" href="https://docs.python.org/2/library/subprocess.html#converting-an-argument-sequence-to-a-string-on-windows">¶</A></H3>
<P>On Windows, an <EM>args</EM> sequence is converted to a string that can be 
parsed using the following rules (which correspond to the rules used by the MS C
 runtime):</P>
<OL class="arabic simple">
  <LI>Arguments are delimited by white space, which is either a space or a 
  tab.</LI>
  <LI>A string surrounded by double quotation marks is interpreted as a single 
  argument, regardless of white space contained within.  A quoted string can be 
  embedded in an argument.</LI>
  <LI>A double quotation mark preceded by a backslash is interpreted as a 
  literal double quotation mark.</LI>
  <LI>Backslashes are interpreted literally, unless they immediately precede a 
  double quotation mark.</LI>
  <LI>If backslashes immediately precede a double quotation mark, every pair of 
  backslashes is interpreted as a literal backslash.  If the number of 
  backslashes is odd, the last backslash escapes the next double quotation mark 
  as described in rule 3.</LI></OL></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class="sphinxsidebar" role="navigation" aria-label="main navigation">
<DIV class="sphinxsidebarwrapper">
<H3><A href="https://docs.python.org/2/contents.html">Table Of Contents</A></H3>
<UL>
  <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#">17.1. 
  <CODE class="docutils literal"><SPAN class="pre">subprocess</SPAN></CODE> — 
  Subprocess management</A>
  <UL> 
    <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#using-the-subprocess-module">17.1.1. 
    Using the <CODE class="docutils literal"><SPAN 
    class="pre">subprocess</SPAN></CODE> Module</A>
    <UL> 
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments">17.1.1.1. 
      Frequently Used Arguments</A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#popen-constructor">17.1.1.2. 
      Popen Constructor</A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#exceptions">17.1.1.3. 
      Exceptions</A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#security">17.1.1.4. 
      Security</A></LI></UL></LI>
    <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#popen-objects">17.1.2. 
    Popen Objects</A></LI>
    <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#windows-popen-helpers">17.1.3. 
    Windows Popen Helpers</A>
    <UL> 
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#constants">17.1.3.1. 
      Constants</A></LI></UL></LI>
    <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#replacing-older-functions-with-the-subprocess-module">17.1.4. 
    Replacing Older Functions with the <CODE class="docutils literal"><SPAN 
    class="pre">subprocess</SPAN></CODE> Module</A>
    <UL> 
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#replacing-bin-sh-shell-backquote">17.1.4.1. 
      Replacing /bin/sh shell backquote</A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#replacing-shell-pipeline">17.1.4.2. 
      Replacing shell pipeline</A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#replacing-os-system">17.1.4.3. 
      Replacing <CODE class="docutils literal"><SPAN 
      class="pre">os.system()</SPAN></CODE></A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#replacing-the-os-spawn-family">17.1.4.4. 
      Replacing the <CODE class="docutils literal"><SPAN 
      class="pre">os.spawn</SPAN></CODE> family</A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3">17.1.4.5. 
      Replacing <CODE class="docutils literal"><SPAN 
      class="pre">os.popen()</SPAN></CODE>, <CODE class="docutils literal"><SPAN 
      class="pre">os.popen2()</SPAN></CODE>, <CODE 
      class="docutils literal"><SPAN 
      class="pre">os.popen3()</SPAN></CODE></A></LI>
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#replacing-functions-from-the-popen2-module">17.1.4.6. 
      Replacing functions from the <CODE class="docutils literal"><SPAN class="pre">popen2</SPAN></CODE> 
      module</A></LI></UL></LI>
    <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#notes">17.1.5. 
    Notes</A>
    <UL> 
      <LI><A class="reference internal" href="https://docs.python.org/2/library/subprocess.html#converting-an-argument-sequence-to-a-string-on-windows">17.1.5.1. 
      Converting an argument sequence to a string on 
  Windows</A></LI></UL></LI></UL></LI></UL>
<H4>Previous topic</H4>
<P class="topless"><A title="previous chapter" href="https://docs.python.org/2/library/ipc.html">17. 
Interprocess Communication and Networking</A></P>
<H4>Next topic</H4>
<P class="topless"><A title="next chapter" href="https://docs.python.org/2/library/socket.html">17.2. 
<CODE class="docutils literal"><SPAN class="pre">socket</SPAN></CODE> — 
Low-level networking interface</A></P>
<H3>This Page</H3>
<UL class="this-page-menu">
  <LI><A href="https://docs.python.org/2/bugs.html">Report a Bug</A></LI>
  <LI><A href="https://github.com/python/cpython/blob/2.7/Doc/library/subprocess.rst" 
  rel="nofollow">Show Source</A>   </LI></UL>
<DIV id="searchbox" role="search" style="display: none;">
<H3>Quick search</H3>
<FORM class="search" action="../search.html" method="get"><INPUT name="q" type="text"> 
      <INPUT type="submit" value="Go">       <INPUT name="check_keywords" type="hidden" value="yes"> 
      <INPUT name="area" type="hidden" value="default">     </FORM>
<P class="searchtip" style="font-size: 90%;">    Enter search terms or a module, 
class or function name.     </P></DIV>
<SCRIPT type="text/javascript">$('#searchbox').show(0);</SCRIPT>
         </DIV></DIV>
<DIV class="clearer"></DIV></DIV>
<DIV class="related" role="navigation" aria-label="related navigation">
<H3>Navigation</H3>
<UL>
  <LI class="right" style="margin-right: 10px;"><A title="General Index" href="https://docs.python.org/2/genindex.html">index</A></LI> 
          
  <LI class="right"><A title="Python Module Index" href="https://docs.python.org/2/py-modindex.html">modules</A> 
  |</LI>         
  <LI class="right"><A title="17.2. socket — Low-level networking interface" 
  href="https://docs.python.org/2/library/socket.html">next</A> |</LI>         
  <LI class="right"><A title="17. Interprocess Communication and Networking" 
  href="https://docs.python.org/2/library/ipc.html">previous</A> |</LI>         
  <LI><IMG style="margin-top: -1px; vertical-align: middle;" alt="" src="17_1_%20subprocess%20—%20Subprocess%20management%20—%20Python%202_7_13%20documentation_files/py.png"></LI> 
          
  <LI><A href="https://www.python.org/">Python</A> »</LI>         
  <LI><SPAN class="version_switcher_placeholder">2.7.13</SPAN>           <A 
  href="https://docs.python.org/2/index.html">Documentation</A> »         </LI>  
           
  <LI class="nav-item nav-item-1"><A href="https://docs.python.org/2/library/index.html">The 
  Python Standard Library</A> »</LI>           
  <LI class="nav-item nav-item-2"><A href="https://docs.python.org/2/library/ipc.html">17. 
  Interprocess Communication and Networking</A> »</LI>       </UL></DIV>
<DIV class="footer">    © <A 
href="https://docs.python.org/2/copyright.html">Copyright</A> 1990-2017, Python 
Software Foundation.     <BR>    The Python Software Foundation is a non-profit 
corporation.     <A href="https://www.python.org/psf/donations/">Please 
donate.</A>     <BR>    Last updated on Aug 02, 2017.     <A href="https://docs.python.org/2/bugs.html">Found 
a bug</A>?     <BR>    Created using <A 
href="http://sphinx.pocoo.org/">Sphinx</A> 1.3.3.     </DIV></BODY></HTML>
